import torch
import torch.nn as nn

# Define some example data
# Assuming logits is the output of your neural network
pred = torch.tensor([[-0.0270, -0.1354, -0.1190],
        [-0.0247, -0.1283, -0.1143],
        [-0.0167, -0.1351, -0.1193],
        [-0.0121, -0.1315, -0.1194],
        [-0.0217, -0.1316, -0.1216],
        [-0.0251, -0.1332, -0.1249],
        [-0.0223, -0.1144, -0.1089],
        [-0.0244, -0.1316, -0.1169],
        [-0.0147, -0.1283, -0.1082],
        [-0.0204, -0.1348, -0.1105],
        [-0.0253, -0.1313, -0.1140],
        [-0.0179, -0.1226, -0.1245],
        [-0.0188, -0.1366, -0.1170],
        [-0.0245, -0.1120, -0.1196],
        [-0.0335, -0.1244, -0.1154],
        [-0.0267, -0.1341, -0.1179],
        [-0.0248, -0.1344, -0.1171],
        [-0.0266, -0.1355, -0.1180],
        [-0.0231, -0.1249, -0.1247],
        [-0.0196, -0.1332, -0.1213],
        [-0.0239, -0.1336, -0.1191],
        [-0.0248, -0.1307, -0.1203],
        [-0.0411, -0.1245, -0.1142],
        [-0.0251, -0.1264, -0.1167],
        [-0.0309, -0.1310, -0.1177],
        [-0.0375, -0.1252, -0.1194],
        [-0.0265, -0.1261, -0.1258],
        [-0.0317, -0.1340, -0.1243],
        [-0.0270, -0.1286, -0.1249],
        [-0.0261, -0.1334, -0.1220],
        [-0.0292, -0.1363, -0.1206],
        [-0.0295, -0.1308, -0.1204],
        [-0.0302, -0.1343, -0.1213],
        [-0.0519, -0.1253, -0.1140],
        [-0.0226, -0.1272, -0.1191],
        [-0.0205, -0.1377, -0.1173],
        [-0.0258, -0.1350, -0.1254],
        [-0.0276, -0.1351, -0.1206],
        [-0.0183, -0.1274, -0.1153],
        [-0.0316, -0.1310, -0.1128],
        [-0.0253, -0.1307, -0.1183],
        [-0.0263, -0.1309, -0.1152],
        [-0.0210, -0.1272, -0.1133],
        [-0.0255, -0.1263, -0.1225],
        [-0.0255, -0.1296, -0.1172],
        [-0.0309, -0.1333, -0.1146],
        [-0.0172, -0.1288, -0.1111],
        [-0.0180, -0.1259, -0.1196],
        [-0.0322, -0.1256, -0.1144],
        [-0.0216, -0.1329, -0.1188],
        [-0.0389, -0.1298, -0.1003],
        [-0.0331, -0.1309, -0.1225],
        [-0.0226, -0.1375, -0.1260],
        [-0.0238, -0.1337, -0.1225],
        [-0.0237, -0.1330, -0.1210],
        [-0.0346, -0.1353, -0.1238],
        [-0.0224, -0.1312, -0.1142],
        [-0.0242, -0.1294, -0.1205],
        [-0.0247, -0.1318, -0.1242],
        [-0.0267, -0.1327, -0.1242]])  
                      
label = torch.tensor([1, 1, 0, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 2, 1, 2, 2,
        2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 0, 0, 1, 1, 0, 2, 0, 1, 0, 1, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

# Initialize CrossEntropyLoss
criterion = nn.CrossEntropyLoss()

# Calculate the loss
loss = criterion(pred, label)
print(loss)

# Do something with the loss, like backpropagation and optimization